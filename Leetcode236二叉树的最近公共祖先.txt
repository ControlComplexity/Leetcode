a. public static  TreeNodes lowestCommonAncestor(TreeNodes root, TreeNodes p, TreeNodes q) {
			if(root== null ||root == p || root == q)
			{
				return root;
			}
			TreeNodes left = lowestCommonAncestor(root.left, p, q);
			TreeNodes right = lowestCommonAncestor(root.right, p, q);
			if(left == null && right == null) return null;
			return left ==null ? left : right;}

b. 思路:
遇到二叉树的问题一般是递归。
递归有临界值。有可能root= null 或者root =p 或者root =q。
第一种情况：左子树和右子树均找没有p结点或者q结点；（这里特别需要注意，虽然题目上说了p结点和q结点必定都存在，但是递归的时候必须把所有情况都考虑进去，因为题目给的条件是针对于整棵树，而递归会到局部，不一定都满足整体条件）
第二种情况：左子树上能找到，但是右子树上找不到，此时就应当直接返回左子树的查找结果；
第三种情况：右子树上能找到，但是左子树上找不到，此时就应当直接返回右子树的查找结果；
第四种情况：左右子树上均能找到，说明此时的p结点和q结点分居root结点两侧，此时就应当直接返回root结点了。