a. public class Solution160 {
//	public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
//		HashMap<Integer, ListNode> hashMap = new HashMap<Integer, ListNode>();
//		int i = 0;
//		while (headA != null) {
//			hashMap.put(i, headA);
//			i++;
//			headA = headA.next;
//		}
//		while (headB != null) {
//			if(hashMap.containsValue(headB))
//			{
//				return headB;
//			}
//			headB = headB.next;
//		}
//		return null;
//	}
	
	 public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
	        /**
	     	 	定义两个指针, 第一轮让两个到达末尾的节点指向另一个链表的头部, 最后如果相遇则为交点(在第一轮移动中恰好抹除了长度差)
	        	两个指针等于移动了相同的距离, 有交点就返回, 无交点就是各走了两条指针的长度
	        **/
	        if(headA == null || headB == null) return null;
	        ListNode pA = headA, pB = headB;
	        // 在这里第一轮体现在pA和pB第一次到达尾部会移向另一链表的表头, 而第二轮体现在如果pA或pB相交就返回交点, 不相交最后就是null==null
	        while(pA != pB) {
	            pA = pA == null ? headB : pA.next;
	            pB = pB == null ? headA : pB.next;
	        }
	        return pA;
	    }}

b.第一种方法: 
遍历链表 A 并将每个结点的地址/引用存储在哈希表中。然后检查链表 B 中的每一个结点 i  是否在哈希表中。若在，则i为相交结点。
第二种方法：
创建两个指针 pApA 和 pBpB，分别初始化为链表 A 和 B 的头结点。然后让它们向后逐结点遍历。
当 pApA 到达链表的尾部时，将它重定位到链表 B 的头结点 (你没看错，就是链表 B); 类似的，当 pBpB 到达链表的尾部时，将它重定位到链表 A 的头结点。
若在某一时刻 pApA 和 pBpB 相遇，则 pApA/pBpB 为相交结点。
