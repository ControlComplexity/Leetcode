a. class TreeNode
{
	int val;
	TreeNode left;
	TreeNode right;
	public TreeNode(int val, TreeNode left, TreeNode right) {
		this.val = val;
		this.left = left;
		this.right = right;
	}
	public TreeNode(int val) {
		this.val = val;
		this.left = null;
		this.right = null;
	}

}
@SuppressWarnings("unused")
public class LevelTraversal {

	public static void main(String[] args) {
		TreeNode rooTreeNode = new TreeNode(7,new TreeNode(4, new TreeNode(5), new TreeNode(6)),new TreeNode(4, new TreeNode(5), new TreeNode(6)));
		List<List<Integer>>  integers = levelOrder(rooTreeNode);
		for (int i = 0; i < integers.size(); i++) {
			System.out.println ();
			for (int j = 0; j < integers.get(i).size(); j++) {
				System.out.print (integers.get(i).get(j));
			}
		}
	}


    public static List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> lists = new ArrayList<>();
        // 判空处理
        if (root == null) {
            return lists;
        }
        // 这里存放树的节点
        List<TreeNode> nodes = new ArrayList<>();
        // 先把root节点加入节点集合
        nodes.add(root);
        // 如果节点集合有节点需要遍历
        while (!nodes.isEmpty()) {
            // 设置遍历集合大小
            int size = nodes.size();
            System.err.println("size:" + size);
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                // 取出第一集合元素，按照加入集合顺序打印
                TreeNode remove = nodes.remove(0);
                // 把节点（类似于根节点）信息加入信息集合
                list.add(remove.val);
                if (remove.left != null) {
                    // 如果有左孩子先加左孩子
                    nodes.add(remove.left);
                }
                if (remove.right != null) {
                    // 如果有右孩子加入右孩子
                    nodes.add(remove.right);
                }
            }
            // 本次数据加入总的数据集合中
            lists.add(list);
        }
        return lists;
    }
}


b.首先，学会用构造函数创造一个二叉树。
其次， 返回时一个List<List<Integer>>。
首先我们确定这个树不为空，如果为空返回空数据，如果不为空再操作。
在层序遍历的时候我们发现，如果根节点是被遍历对象，先遍历根节点，再遍历左孩子，然乎右孩子。
确保左孙子节点在右孩子节点之后，如果孙子或者孩子节点为空不需要遍历。
如果后代没有可以遍历的节点，则返回数据，遍历结束。