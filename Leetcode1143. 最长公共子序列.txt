a.class Solution {
public  int longestCommonSubsequence(String text1, String text2) {
	System.out.println(text1.charAt(0));
	int m = text1.length();
	int n = text2.length();
	char t1[] = text1.toCharArray();
	char t2[] = text2.toCharArray();
	int dp[][] = new int[m+1][n+1];
	for (int i = 0; i < m; i++) 
	{
		dp[i][0] = 0;
	}
	for (int i = 0; i < n; i++) 
	{
		dp[0][i] = 0;
	}
	for (int i = 1; i <= m; i++) 
	{
		for (int j = 1; j <= n; j++) {
			if(t1[i-1] == t2[j-1])
			{
				dp[i][j] = dp[i-1][j-1] + 1;
			}else {
				dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
			}
		}}	return dp[m][n];}}


b.思路：序列，就是要保留原始顺序，但可以是不连续的。
int[][] dp = new int[m+1][n+1]。
为什么要m+1，n+1？因为dp[m][n]表示有效所以加一。dp[...][0]和dp[0][...]表示索引为0的行和列。
现在对比的这两个字符不相同的，那么我们要取它的，要么是text1往前退一格，要么是text2往前退一格，两个的最大值
dp[i + 1][j + 1] = Math.max(dp[i+1][j], dp[i][j+1]);
对比的两个字符相同，去找它们前面各退一格的值加1即可
