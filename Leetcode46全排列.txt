import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Solution46 {
	public static void main(String[] args) {
		int []nums = {1,2,3};
		List<List<Integer>> list = permute(nums);
		for (int i = 0; i < list.size(); i++) {
			
		for (int j = 0; j < nums.length; j++) {
			System.out.print(list.get(i).get(j));
		}
		System.out.print(",");
		}
	}

	public static List<List<Integer>> permute(int[] nums) {
		List<Integer> integers = new ArrayList<Integer>();
		for (int i = 0; i < nums.length; i++) {
			integers.add(nums[i]);
		}
		List<List<Integer>>  res = new ArrayList<List<Integer>>();
		int n = nums.length;
		 backtrack(n, integers,  res, 0);
		 return res;
	}
	
	public static void backtrack(int n, List<Integer> integers, List<List<Integer>> res, int first) {
		 if (first == n) {
	            res.add(new ArrayList<Integer>(integers));
	        }
		 for (int i = 0; i < res.size(); i++) {
				
				for (int j = 0; j < integers.size(); j++) {
					System.out.print(res.get(i).get(j));
				}
				System.out.print(",");
				}
		 System.out.println("--------------------");
	      for (int i = first; i < n; i++) {
	            Collections.swap(integers, first, i);
	            backtrack(n, integers, res, first + 1);
	            Collections.swap(integers, first, i);
	        }
	}
}

b.交换元素用 Collections.swap(integers, first, i);
c.回溯法
