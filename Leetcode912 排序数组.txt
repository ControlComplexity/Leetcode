// 2020.10.27 
// 第四遍快排
class Solution {
    public int[] sortArray(int[] nums) {
        quickSort(nums, 0, nums.length - 1);
        return nums;
    }

    public void quickSort(int[] nums, int L, int R) {
        if (L >= R) return;

        int left = L;
        int right = R;
        // 随意取一个值作为pivot，此处为了方便取最左
        int pivot = nums[left]; 

        while (left < right) {
            // 先从右往左找一个比pivot小的数
            while (left < right && pivot <= nums[right]) right--;
            // 找到之后把它放到左边
            nums[left] = nums[right];
            // 再从左往右找一个比pivot大的数
            while (left < right && pivot >= nums[left]) left++;
            // 找到之后把它放到右边
            nums[right] = nums[left];
        }
        // 循环结束时left == right
        // 直接把pivot放在这个位置
        nums[left] = pivot;
        // 递归操作
        quickSort(nums, L, left - 1);
        quickSort(nums, left + 1, R);
        
    }
}

快速排序，分治法
